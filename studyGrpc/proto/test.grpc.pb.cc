// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: test.proto

#include "test.pb.h"
#include "test.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>

static const char* TestRoute_method_names[] = {
  "/TestRoute/GetTest",
  "/TestRoute/GetStreamTest",
};

std::unique_ptr< TestRoute::Stub> TestRoute::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< TestRoute::Stub> stub(new TestRoute::Stub(channel, options));
  return stub;
}

TestRoute::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_GetTest_(TestRoute_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetStreamTest_(TestRoute_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::BIDI_STREAMING, channel)
  {}

::grpc::Status TestRoute::Stub::GetTest(::grpc::ClientContext* context, const ::Input& request, ::OutPut* response) {
  return ::grpc::internal::BlockingUnaryCall< ::Input, ::OutPut, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetTest_, context, request, response);
}

void TestRoute::Stub::async::GetTest(::grpc::ClientContext* context, const ::Input* request, ::OutPut* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::Input, ::OutPut, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetTest_, context, request, response, std::move(f));
}

void TestRoute::Stub::async::GetTest(::grpc::ClientContext* context, const ::Input* request, ::OutPut* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetTest_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::OutPut>* TestRoute::Stub::PrepareAsyncGetTestRaw(::grpc::ClientContext* context, const ::Input& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::OutPut, ::Input, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetTest_, context, request);
}

::grpc::ClientAsyncResponseReader< ::OutPut>* TestRoute::Stub::AsyncGetTestRaw(::grpc::ClientContext* context, const ::Input& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetTestRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientReaderWriter< ::Input, ::OutPut>* TestRoute::Stub::GetStreamTestRaw(::grpc::ClientContext* context) {
  return ::grpc::internal::ClientReaderWriterFactory< ::Input, ::OutPut>::Create(channel_.get(), rpcmethod_GetStreamTest_, context);
}

void TestRoute::Stub::async::GetStreamTest(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::Input,::OutPut>* reactor) {
  ::grpc::internal::ClientCallbackReaderWriterFactory< ::Input,::OutPut>::Create(stub_->channel_.get(), stub_->rpcmethod_GetStreamTest_, context, reactor);
}

::grpc::ClientAsyncReaderWriter< ::Input, ::OutPut>* TestRoute::Stub::AsyncGetStreamTestRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::Input, ::OutPut>::Create(channel_.get(), cq, rpcmethod_GetStreamTest_, context, true, tag);
}

::grpc::ClientAsyncReaderWriter< ::Input, ::OutPut>* TestRoute::Stub::PrepareAsyncGetStreamTestRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::Input, ::OutPut>::Create(channel_.get(), cq, rpcmethod_GetStreamTest_, context, false, nullptr);
}

TestRoute::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TestRoute_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< TestRoute::Service, ::Input, ::OutPut, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](TestRoute::Service* service,
             ::grpc::ServerContext* ctx,
             const ::Input* req,
             ::OutPut* resp) {
               return service->GetTest(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TestRoute_method_names[1],
      ::grpc::internal::RpcMethod::BIDI_STREAMING,
      new ::grpc::internal::BidiStreamingHandler< TestRoute::Service, ::Input, ::OutPut>(
          [](TestRoute::Service* service,
             ::grpc::ServerContext* ctx,
             ::grpc::ServerReaderWriter<::OutPut,
             ::Input>* stream) {
               return service->GetStreamTest(ctx, stream);
             }, this)));
}

TestRoute::Service::~Service() {
}

::grpc::Status TestRoute::Service::GetTest(::grpc::ServerContext* context, const ::Input* request, ::OutPut* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status TestRoute::Service::GetStreamTest(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::OutPut, ::Input>* stream) {
  (void) context;
  (void) stream;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


